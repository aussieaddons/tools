#!/usr/bin/env python

import argparse
import sys
import os
import re
import xml.dom.minidom as DOM

VERSION_PY = """# This file is generated by a GIT pre-commit hook
VERSION = '%s'
"""
# This can be changed for testing
ADDON_PATH = '.'

def get_output(cmd):
    pipe = os.popen(cmd, 'r')
    text = pipe.read().rstrip('\n')
    status = pipe.close() or 0
    return status, text


def get_git_branch():
    n, result = get_output('git branch')
    branch = re.search(r'\* (\w+)', result).group(1)

    return branch

def write_version(ver):
    version_path = os.path.join(ADDON_PATH, 'resources', 'lib', 'version.py')
    if os.path.isfile(version_path):
        f = open(version_path, "w")
        f.write(VERSION_PY % ver)
        f.close()
        git_add_file(version_path)

   
def write_addon_xml_version(ver):
    addon_xml_file = os.path.join(ADDON_PATH, 'addon.xml')
    dom = DOM.parse(addon_xml_file)
    addon = dom.getElementsByTagName('addon')[0]
    version = addon.setAttribute('version', ver)

    f = open(addon_xml_file, 'w')
    dom.writexml(f)
    f.close()
    git_add_file(addon_xml_file)


def get_tags():
    n, result = get_output('git tag -l')
    if n:
        _print('WARNING: git describe failed with: %s %s' % (n, result))
        return None

    return result.splitlines()


def get_commits(tag1, tag2):
    tags = "%s...%s" % (tag1, tag2)
    n, result = get_output('git log --pretty=format:%s ' + tags)
    return result.splitlines()


def git_commit_tag(ver):
    n, result = get_output("git commit --no-verify -m 'Version %s'" % ver)
    if n:
        print('WARNING: git commit failed with: %s %s' % (n, result))
        return False

    n, result = get_output("git tag -a v%s -m 'Version %s'" % (ver, ver))
    if n:
        print('WARNING: git tag failed with: %s %s' % (n, result))
        return False

    return True


def git_add_file(f):
    n, result = get_output("git add %s" % f)
    if n:
        print('WARNING: git add failed with: %s %s' % (n, result))
        return False
    return True


def write_changelog(ver):
    tags = get_tags()
    tags.append('master')

    tags.reverse()

    changelog_file = os.path.join(ADDON_PATH, 'changelog.txt')
    f = open(changelog_file, 'w')
    for i in range(len(tags)):
        if i < len(tags)-1:

            # Use our given release version
            tag = tags[i]
            if tag == 'master':
                tag = ver

            f.write("[B]Version %s[/B]\n" % tag)
            commits = get_commits(tags[i], tags[i+1])
            for commit in commits:

                # Skip the 'Update to v1.0' tag commit messages
                if commit.find(tags[i]) > -1:
                    continue

                f.write("- %s\n" % commit)
            f.write("\n")

    f.close()
    git_add_file(changelog_file)


def version_number(string):
    match = re.match(r'(\d+).(\d+)(?:\.(\d+))?', string, re.VERBOSE)
    if not match:
        msg = "%r is not a valid version number" % string
        raise argparse.ArgumentTypeError(msg)

    numbers = [n for n in match.groups() if n]
    ver = '.'.join(tuple(numbers))
    return ver


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Build a XBMC Addon release.')
    parser.add_argument('-v', '--version', type=version_number, help='version number')
    args = parser.parse_args()

    if args.version is None:
        print("Error: version number not given (try -v 1.2.0)")
        sys.exit(1)

    # Write version information
    ver = args.version
    if ver:
      write_version(ver)
      write_addon_xml_version(ver)

    # Write XBMC changelog
    write_changelog(ver)

    git_commit_tag(ver)
