#!/usr/bin/env python

# GIT pre-commit hook to write the version number
#
# Set up like this from top dir:
#   ln -s utils/git-hooks/pre-commit .git/hooks/pre-commit
#

import os
import re
import xml.dom.minidom as DOM

VERSION_PY = """# This file is generated by a GIT pre-commit hook
VERSION = '%s'
"""
# This can be changed for testing
ADDON_PATH = '.'

def get_output(cmd):
    pipe = os.popen(cmd, 'r')
    text = pipe.read().rstrip('\n')
    status = pipe.close() or 0
    return status, text

def get_git_version():
    n, result = get_output('git describe --tags')
    if n:
        _print('WARNING: git describe failed with: %s %s' % (n, result))
        return None, None

    match = re.match(r'(?:v)(\d+).(\d+)(?:\.(\d+))?(?:-(\d+-g[0-9a-z]+))?', result, re.VERBOSE)
    if not match:
        return None

    # Remove 'None's from optional regex captures
    numbers = [n for n in match.groups() if n]

    if len(numbers) < 4:
        ver = '.'.join(tuple(numbers))
    else:
        # Git version, without offical v1.2 style tag
        ver = '%s.%s.%s-%s' % tuple(numbers)

    return ver


def get_git_branch():
    n, result = get_output('git branch')
    branch = re.search(r'\* (\w+)', result).group(1)

    return branch


def get_version():
    ver = get_git_version()

    branch = get_git_branch()
    if branch != 'master' and not re.match('^v\d+$', branch):
        name = "%s-%s" % (ver, branch)
    else:
        name = ver
    
    return name


def git_add_file(f):
    n, result = get_output("git add %s" % f)
    if n:
        _print('WARNING: git add failed with: %s %s' % (n, result))
        return False
    return True
 

def write_version(ver):
    version_path = os.path.join(ADDON_PATH, 'resources', 'lib', 'version.py')
    f = open(version_path, "w")
    f.write(VERSION_PY % ver)
    f.close()
    git_add_file(version_path)
   

def write_addon_xml_version(ver):
    addon_xml_file = os.path.join(ADDON_PATH, 'addon.xml')
    dom = DOM.parse(addon_xml_file)
    addon = dom.getElementsByTagName('addon')[0]
    version = addon.setAttribute('version', ver)

    f = open(addon_xml_file, 'w')
    dom.writexml(f)
    f.close()
    git_add_file(addon_xml_file)


def get_tags():
    n, result = get_output('git tag -l')
    if n:
        _print('WARNING: git describe failed with: %s %s' % (n, result))
        return None

    return result.splitlines()


def get_commits(tag1, tag2):
    tags = "%s...%s" % (tag1, tag2)
    n, result = get_output('git log --pretty=format:%s ' + tags)
    return result.splitlines()


def write_changelog():
    tags = get_tags()
    ver = get_git_version()

    # Test if we're not a tagged release
    if not tags[-1].endswith(ver):
        branch = get_git_branch()
        tags.append(branch)

    tags.reverse()

    changelog_file = os.path.join(ADDON_PATH, 'changelog.txt')
    f = open(changelog_file, 'w')
    for i in range(len(tags)):
        if i < len(tags)-1:
            f.write("[B]Version %s[/B]\n" % tags[i])
            commits = get_commits(tags[i], tags[i+1])
            for commit in commits:

                # Skip the 'Update to v1.0' tag commit messages
                if commit.find(tags[i]) > -1:
                    continue

                f.write("- %s\n" % commit)
            f.write("\n")

    f.close()
    git_add_file(changelog_file)

if __name__ == '__main__':
    # Write version information
    ver = get_version()
    if ver:
      write_version(ver)
      write_addon_xml_version(ver)

    # Write XBMC changelog
    write_changelog()
